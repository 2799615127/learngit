<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<!-- 一般来说一个实体类对应一个映射文件 -->
<mapper namespace="test">
	<!-- 根据用户ID查询 -->
	<!--
		id属性用于指定sql语句的 MapStatement的id值 parameterType 用于指定输入参数的类型 resultType
		用于指定返回数据的类型（要求MyBatis将ResultSet封装成什么对象）
	-->
	<select id="findUserById" parameterType="int"
		resultType="com.yidu.mybatis.example.bean.User">
		select * from users where userid=#{userid}
	</select>

	<!-- 根据用户名进行模糊查询 -->
	<!-- 模糊查询时，用的是字符串拼接  ${输入参数的名字}-->
	<select id="findUserByName" parameterType="java.lang.String"
		resultType="com.yidu.mybatis.example.bean.User">
		select * from users where username like '%${value}%'
	</select>

	<!-- 删除用户 -->
	<delete id="deleteUser" parameterType="int">
		delete from users where
		userid=#{id}
	</delete>


	<!-- 添加用户  不要返回主键的值 -->
	<insert id="insertUser" parameterType="com.yidu.mybatis.example.bean.User">
		insert into users
		values(#{userid},#{username},#{password},#{birthday},#{gender},#{address})
	</insert>

	<!-- 添加用户，返回主键值（用数据库的方式拿到） -->
	<insert id="insertUser1" parameterType="com.yidu.mybatis.example.bean.User">
		<!-- keyProperty属性指定主键名
			 order属性用于指定在插入之前获得序列值
			 resultType属性指定序列的数据类型
		 -->
		<selectKey keyProperty="userid" order="BEFORE" resultType="java.lang.Integer">
			select user_seq.nextval from dual
		</selectKey>
		
		<!-- MySql中要使用自增长并返回的主键值用
		<selectKey keyProperty="userid" order="AFTER" resultType="java.lang.Integer">
			select LAST_INSERT_ID()
		</selectKey>
		 -->
		 
		insert into users
		values(#{userid},#{username},#{password},#{birthday},#{gender},#{address})
	</insert>



	<!-- 修改用户 -->
	<update id="updateUser" parameterType="com.yidu.mybatis.example.bean.User">
		update users set
		username=#{username},password=#{password},address=#{address}
		where
		userid=#{userid}
	</update>


</mapper>
